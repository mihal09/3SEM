/**
 * Copyright 2011 Joao Miguel Pereira
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package eu.jpereira.trainings.designpatterns.behavioral.state.mapper;

import java.util.Queue;

import eu.jpereira.trainings.designpatterns.behavioral.state.event.EventData;

/**
 * Represents a chain of mappers
 * @author jpereira
 *
 */
public class MapperChain {
	
	private Queue<EventMapper> mappers;
	
	public MapperChain() {
		this.mappers = new LinkedListQueue<EventMapper>();
	}
	/**
	 * Calls the next mapper in the chain, if any
	 * @param data The data to pass along the chain
	 * @param event the event generated by last {@link EventMapper}, if any 
	 */
	public void doMap(EventData data) {
		if ( this.mappers.peek()!=null) {
			EventMapper mapper = this.mappers.poll();
			mapper.doMap(data, this);
		}
	}

	/**
	 * @param applianceEventMapper
	 */
	public void addToChain(EventMapper applianceEventMapper) {
		//Add this to a queue
		mappers.offer(applianceEventMapper);
		
	}

}
